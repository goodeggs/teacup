// Generated by CoffeeScript 2.3.1
(function() {
  var Teacup, doctypes, elements, i, j, l, len, len1, len2, len3, m, merge_elements, ref, ref1, ref2, ref3, tagName,
    indexOf = [].indexOf;

  doctypes = {
    'default': '<!DOCTYPE html>',
    '5': '<!DOCTYPE html>',
    'xml': '<?xml version="1.0" encoding="utf-8" ?>',
    'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
    'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
    'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
    '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
    'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
    'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
    'ce': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "ce-html-1.0-transitional.dtd">'
  };

  elements = {
    // Valid HTML 5 elements requiring a closing tag.
    // Note: the `var` element is out for obvious reasons, please use `tag 'var'`.
    regular: 'a abbr address article aside audio b bdi bdo blockquote body button canvas caption cite code colgroup datalist dd del details dfn div dl dt em fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins kbd label legend li map mark menu meter nav noscript object ol optgroup option output p pre progress q rp rt ruby s samp section select small span strong sub summary sup table tbody td textarea tfoot th thead time title tr u ul video',
    raw: 'style',
    script: 'script',
    // Valid self-closing HTML 5 elements.
    void: 'area base br col command embed hr img input keygen link meta param source track wbr',
    obsolete: 'applet acronym bgsound dir frameset noframes isindex listing nextid noembed plaintext rb strike xmp big blink center font marquee multicol nobr spacer tt',
    obsolete_void: 'basefont frame'
  };

  // Create a unique list of element names merging the desired groups.
  merge_elements = function(...args) {
    var a, element, i, j, len, len1, ref, result;
    result = [];
    for (i = 0, len = args.length; i < len; i++) {
      a = args[i];
      ref = elements[a].split(' ');
      for (j = 0, len1 = ref.length; j < len1; j++) {
        element = ref[j];
        if (indexOf.call(result, element) < 0) {
          result.push(element);
        }
      }
    }
    return result;
  };

  Teacup = (function() {
    class Teacup {
      constructor() {
        this.htmlOut = null;
      }

      resetBuffer(html = null) {
        var previous;
        previous = this.htmlOut;
        this.htmlOut = html;
        return previous;
      }

      render(template, ...args) {
        var previous, result;
        previous = this.resetBuffer('');
        try {
          template(...args);
        } finally {
          result = this.resetBuffer(previous);
        }
        return result;
      }

      // alias render for coffeecup compatibility
      cede(...args) {
        return this.render(...args);
      }

      renderable(template) {
        var teacup;
        teacup = this;
        return function(...args) {
          var result;
          if (teacup.htmlOut === null) {
            teacup.htmlOut = '';
            try {
              template.apply(this, args);
            } finally {
              result = teacup.resetBuffer();
            }
            return result;
          } else {
            return template.apply(this, args);
          }
        };
      }

      renderAttr(name, value) {
        var k, v;
        if (value == null) {
          return ` ${name}`;
        }
        if (value === false) {
          return '';
        }
        if (name === 'data' && typeof value === 'object') {
          return ((function() {
            var results;
            results = [];
            for (k in value) {
              v = value[k];
              results.push(this.renderAttr(`data-${k}`, v));
            }
            return results;
          }).call(this)).join('');
        }
        if (name === 'aria' && typeof value === 'object') {
          return ((function() {
            var results;
            results = [];
            for (k in value) {
              v = value[k];
              results.push(this.renderAttr(`aria-${k}`, v));
            }
            return results;
          }).call(this)).join('');
        }
        if (value === true) {
          value = name;
        }
        return ` ${name}=${this.quote(this.escape(value.toString()))}`;
      }

      renderAttrs(obj) {
        var i, len, name, ref, result, value;
        result = '';
        ref = this.attrOrder;
        // render explicitly ordered attributes first
        for (i = 0, len = ref.length; i < len; i++) {
          name = ref[i];
          if (name in obj) {
            result += this.renderAttr(name, obj[name]);
          }
        }
// then unordered attrs
        for (name in obj) {
          value = obj[name];
          if (indexOf.call(this.attrOrder, name) >= 0) {
            continue;
          }
          result += this.renderAttr(name, value);
        }
        return result;
      }

      renderContents(contents, ...rest) {
        var result;
        if (contents == null) {

        } else if (typeof contents === 'function') {
          result = contents.apply(this, rest);
          if (typeof result === 'string') {
            return this.text(result);
          }
        } else {
          return this.text(contents);
        }
      }

      isSelector(string) {
        var ref;
        return string.length > 1 && ((ref = string.charAt(0)) === '#' || ref === '.');
      }

      parseSelector(selector) {
        var classes, i, id, klass, len, ref, token;
        id = null;
        classes = [];
        ref = selector.split('.');
        for (i = 0, len = ref.length; i < len; i++) {
          token = ref[i];
          token = token.trim();
          if (id) {
            classes.push(token);
          } else {
            [klass, id] = token.split('#');
            if (klass !== '') {
              classes.push(token);
            }
          }
        }
        return {id, classes};
      }

      normalizeArgs(args) {
        var arg, attrs, classes, contents, i, id, index, len, parsedSelector, selector;
        attrs = {};
        selector = null;
        contents = null;
        for (index = i = 0, len = args.length; i < len; index = ++i) {
          arg = args[index];
          if (arg != null) {
            switch (typeof arg) {
              case 'string':
                if (index === 0 && this.isSelector(arg)) {
                  selector = arg;
                  parsedSelector = this.parseSelector(arg);
                } else {
                  contents = arg;
                }
                break;
              case 'function':
              case 'number':
              case 'boolean':
                contents = arg;
                break;
              case 'object':
                if (arg.constructor === Object) {
                  attrs = arg;
                } else {
                  contents = arg;
                }
                break;
              default:
                contents = arg;
            }
          }
        }
        if (parsedSelector != null) {
          ({id, classes} = parsedSelector);
          if (id != null) {
            attrs.id = id;
          }
          if (classes != null ? classes.length : void 0) {
            if (attrs.class) {
              classes.push(attrs.class);
            }
            attrs.class = classes.join(' ');
          }
        }
        return {attrs, contents, selector};
      }

      tag(tagName, ...args) {
        var attrs, contents;
        ({attrs, contents} = this.normalizeArgs(args));
        this.raw(`<${tagName}${this.renderAttrs(attrs)}>`);
        this.renderContents(contents);
        return this.raw(`</${tagName}>`);
      }

      rawTag(tagName, ...args) {
        var attrs, contents;
        ({attrs, contents} = this.normalizeArgs(args));
        this.raw(`<${tagName}${this.renderAttrs(attrs)}>`);
        this.raw(contents);
        return this.raw(`</${tagName}>`);
      }

      scriptTag(tagName, ...args) {
        var attrs, contents;
        ({attrs, contents} = this.normalizeArgs(args));
        this.raw(`<${tagName}${this.renderAttrs(attrs)}>`);
        this.renderContents(contents);
        return this.raw(`</${tagName}>`);
      }

      selfClosingTag(tag, ...args) {
        var attrs, contents;
        ({attrs, contents} = this.normalizeArgs(args));
        if (contents) {
          throw new Error(`Teacup: <${tag}/> must not have content.  Attempted to nest ${contents}`);
        }
        return this.raw(`<${tag}${this.renderAttrs(attrs)} />`);
      }

      coffeescript(fn) {
        return this.raw(`<script type="text/javascript">(function() {\n  var __slice = [].slice,\n      __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n  (${this.escape(fn.toString())})();\n})();</script>`);
      }

      comment(text) {
        return this.raw(`<!--${this.escape(text)}-->`);
      }

      doctype(type = 5) {
        return this.raw(doctypes[type]);
      }

      ie(condition, contents) {
        this.raw(`<!--[if ${this.escape(condition)}]>`);
        this.renderContents(contents);
        return this.raw("<![endif]-->");
      }

      text(s) {
        if (this.htmlOut == null) {
          throw new Error("Teacup: can't call a tag function outside a rendering context");
        }
        this.htmlOut += (s != null) && this.escape(s.toString()) || '';
        return null;
      }

      raw(s) {
        if (s == null) {
          return;
        }
        this.htmlOut += s;
        return null;
      }

      
      // Filters
      // return strings instead of appending to buffer

      // Don't escape single quote (') because we always quote attributes with double quote (")
      escape(text) {
        return text.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
      }

      quote(value) {
        return `"${value}"`;
      }

      
      // Plugins

      use(plugin) {
        return plugin(this);
      }

      
      // Binding

      tags() {
        var bound, boundMethodNames, i, len, method;
        bound = {};
        boundMethodNames = [].concat('cede coffeescript comment component doctype escape ie normalizeArgs raw render renderable script tag text use'.split(' '), merge_elements('regular', 'obsolete', 'raw', 'void', 'obsolete_void'));
        for (i = 0, len = boundMethodNames.length; i < len; i++) {
          method = boundMethodNames[i];
          ((method) => {
            return bound[method] = (...args) => {
              return this[method].apply(this, args);
            };
          })(method);
        }
        return bound;
      }

      component(func) {
        return (...args) => {
          var attrs, contents, renderContents, selector;
          ({selector, attrs, contents} = this.normalizeArgs(args));
          renderContents = (...args) => {
            args.unshift(contents);
            return this.renderContents.apply(this, args);
          };
          return func.apply(this, [selector, attrs, renderContents]);
        };
      }

    };

    Teacup.prototype.attrOrder = ['id', 'class'];

    return Teacup;

  }).call(this);

  ref = merge_elements('regular', 'obsolete');
  // Define tag functions on the prototype for pretty stack traces
  for (i = 0, len = ref.length; i < len; i++) {
    tagName = ref[i];
    (function(tagName) {
      return Teacup.prototype[tagName] = function(...args) {
        return this.tag(tagName, ...args);
      };
    })(tagName);
  }

  ref1 = merge_elements('raw');
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    tagName = ref1[j];
    (function(tagName) {
      return Teacup.prototype[tagName] = function(...args) {
        return this.rawTag(tagName, ...args);
      };
    })(tagName);
  }

  ref2 = merge_elements('script');
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    tagName = ref2[l];
    (function(tagName) {
      return Teacup.prototype[tagName] = function(...args) {
        return this.scriptTag(tagName, ...args);
      };
    })(tagName);
  }

  ref3 = merge_elements('void', 'obsolete_void');
  for (m = 0, len3 = ref3.length; m < len3; m++) {
    tagName = ref3[m];
    (function(tagName) {
      return Teacup.prototype[tagName] = function(...args) {
        return this.selfClosingTag(tagName, ...args);
      };
    })(tagName);
  }

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = new Teacup().tags();
    module.exports.Teacup = Teacup;
  } else if (typeof define === 'function' && define.amd) {
    define('teacup', [], function() {
      return new Teacup().tags();
    });
  } else {
    window.teacup = new Teacup().tags();
    window.teacup.Teacup = Teacup;
  }

}).call(this);
